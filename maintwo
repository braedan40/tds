--------------------------------------------------------------------------------
-- Define local functions and variables
--------------------------------------------------------------------------------

local functions = {}
local PlaceNameradd = 0  -- Added to keep track of placements if needed elsewhere.

local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TeleportService = game:GetService("TeleportService")

-- OPTIONAL: Define RemoteEvent if you havenâ€™t elsewhere:
local RemoteEvent = ReplicatedStorage:WaitForChild("RemoteEvent") 
local RemoteFunction = ReplicatedStorage:WaitForChild("RemoteFunction")

-- OPTIONAL: If needed, define "LocalPlayer" for TeleportService
local LocalPlayer = Players.LocalPlayer

--------------------------------------------------------------------------------
-- Example placeholders for printing methods (adjust as needed)
--------------------------------------------------------------------------------

local function ConsoleInfo(msg)
	print("[ConsoleInfo]: " .. msg)
end

local function prints(...)
	print(...)
end

--------------------------------------------------------------------------------
-- Utility functions to detect if we are in lobby or in a game
--------------------------------------------------------------------------------
function inlobby()
    return game.PlaceId == 3260590327 
        or (
            game:GetService("Workspace"):FindFirstChild("Type") 
            and game:GetService("Workspace").Type.Value == "Lobby"
        )
end

function ingame()
    return game.PlaceId == 5591597781 
        or (
            game:GetService("Workspace"):FindFirstChild("Type") 
            and game:GetService("Workspace").Type.Value == "Game"
        )
end

--------------------------------------------------------------------------------
-- Wait for wave timer
--------------------------------------------------------------------------------
function waitwavetimer(Wave, Min, Sec, InWave)
    if ingame() then
        local RSTimer = game:GetService("ReplicatedStorage"):WaitForChild("State"):WaitForChild("Timer"):WaitForChild("Time")
        local targetTime = (Min * 60) + math.ceil(Sec)  -- Fixed missing parenthesis

        -- If time is already below threshold, immediately return
        if (RSTimer.Value - targetTime) < -1 then
            return true
        end

        -- Wait until the timer is within 1 second of the target
        repeat
            task.wait()
        until (RSTimer.Value - targetTime) <= 1

        return true
    end
    return false
end

--------------------------------------------------------------------------------
-- Place function
--------------------------------------------------------------------------------
functions.Place = function(self, params)
    -- Helper check for ingame() to unify usage
    if not ingame() then
        warn("Not in game, cannot place tower.")
        return
    end
    
    local Tower = params["TowerName"]
    local Position = params["Position"] or Vector3.new(0, 0, 0)
    local Rotation = params["Rotation"] or CFrame.new(0, 0, 0)
    local Wave, Min, Sec, InWave = params["Wave"] or 0, params["Minute"] or 0, params["Second"] or 0, params["InBetween"] or false

    if not Tower then
        error("TowerName is missing or nil")
        return
    end

    -- Wait for wave timer
    repeat task.wait() until waitwavetimer(Wave, Min, Sec, InWave)

    PlaceNameradd += 1

    local placementResult
    repeat
        placementResult = RemoteFunction:InvokeServer(
            "Troops",
            "Place",
            {
                ["Position"] = Position,
                ["Rotation"] = Rotation
            },
            Tower
        )
    until typeof(placementResult) == "Instance"

    if placementResult then
        placementResult.Name = "Tower_" .. PlaceNameradd
    else
        warn("Failed to place the tower: ", Tower)
    end
end

--------------------------------------------------------------------------------
-- Upgrade function
--------------------------------------------------------------------------------
functions.Upgrade = function(self, params)
    local Tower = params["TowerName"]
    local Wave, Min, Sec, InWave = params["Wave"] or 0, params["Minute"] or 0, params["Second"] or 0, params["InBetween"] or false

    if not Tower then
        error("TowerName is missing or nil")
        return
    end

    -- Wait for wave timer
    repeat task.wait() until waitwavetimer(Wave, Min, Sec, InWave)

    local args = {
        [1] = "Troops",
        [2] = "Upgrade",
        [3] = "Set",
        [4] = {
            ["Troop"] = game:GetService("Workspace").Towers:FindFirstChild(Tower),
            ["Path"] = 1
        }
    }
    RemoteFunction:InvokeServer(unpack(args))
end

--------------------------------------------------------------------------------
-- Sell function
--------------------------------------------------------------------------------
functions.Sell = function(self, params)
    local Tower = params["TowerName"]
    local Wave, Min, Sec, InWave = params["Wave"] or 0, params["Minute"] or 0, params["Second"] or 0, params["InBetween"] or false

    if not Tower then
        error("TowerName is missing or nil")
        return
    end

    -- Wait for wave timer
    repeat task.wait() until waitwavetimer(Wave, Min, Sec, InWave)

    local args = {
        [1] = "Troops",
        [2] = "Sell",
        [3] = {
            ["Troop"] = game:GetService("Workspace").Towers:FindFirstChild(Tower)
        }
    }
    RemoteFunction:InvokeServer(unpack(args))
end

--------------------------------------------------------------------------------
-- Skill/Ability function
--------------------------------------------------------------------------------
functions.Skill = function(self, params)
    local Tower = params["TowerName"]
    local AbilityName = params["AbilityName"] or "SkillName"
    local Wave, Min, Sec, InWave = params["Wave"] or 0, params["Minute"] or 0, params["Second"] or 0, params["InBetween"] or false

    if not Tower then
        error("TowerName is missing or nil")
        return
    end

    -- Wait for wave timer
    repeat task.wait() until waitwavetimer(Wave, Min, Sec, InWave)

    local args = {
        [1] = "Troops",
        [2] = "Abilities",
        [3] = "Activate",
        [4] = {
            ["Troop"] = game:GetService("Workspace").Towers:FindFirstChild(Tower),
            ["Name"] = AbilityName,
            ["Data"] = {}
        }
    }
    RemoteFunction:InvokeServer(unpack(args))
end

--------------------------------------------------------------------------------
-- Skip function
--------------------------------------------------------------------------------
functions.Skip = function(self, params)
    local Wave, Min, Sec, InWave = params["Wave"] or 0, params["Minute"] or 0, params["Second"] or 0, params["InBetween"] or false

    -- Wait for wave timer
    repeat task.wait() until waitwavetimer(Wave, Min, Sec, InWave)

    local args = {
        [1] = "Voting",
        [2] = "Skip"
    }
    RemoteFunction:InvokeServer(unpack(args))
end

return functions

-- Example usage of the functions
getgenv().StratCreditsAuthor = "Optional"
local TDS = loadstring(game:HttpGet("https://raw.githubusercontent.com/braedan40/tds/refs/heads/main/maintwo", true))()
TDS:Map("Simplicity Remaster", true, "Survival")
TDS:Loadout({"Soldier"})
TDS:Mode("Easy")
TDS:Place("Soldier", -18.070785522460938, 1.0000004768371582, -2.4451284408569336, 0, 0, 13.7, false, -0, 0, 0)
-- Continue with the rest of your TDS commands...
